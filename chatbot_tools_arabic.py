import streamlit as st
from PIL import Image
import json
from shared.config import init_apis
from shared.langchain_rag import init_langchain_rag
from shared.embeddings import get_image_description
from shared.database import search_by_image
import openai

# Page config
st.set_page_config(
    page_title="ŸÖÿ≥ÿßÿπÿØ ŸÖÿ™ÿ¨ÿ± ÿßŸÑŸÖÿ¨ŸàŸáÿ±ÿßÿ™ ÿßŸÑÿ∞ŸÉŸä - Tools",
    page_icon="üíé",
    layout="wide"
)

# Initialize session state
if "messages" not in st.session_state:
    st.session_state.messages = []
    st.session_state.messages.append({
        "role": "assistant",
        "content": "ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØŸÉ ÿßŸÑÿ∞ŸÉŸä ŸÑŸÖÿ™ÿ¨ÿ± ÿßŸÑŸÖÿ¨ŸàŸáÿ±ÿßÿ™ üíé\n\nü§ñ **ŸÖÿØÿπŸàŸÖ ÿ®ŸÄ Function Calling**\n\nÿ£ÿ≥ÿ™ÿ∑Ÿäÿπ ÿ£ŸÜ ÿ£ŸÇÿ±ÿ± ŸÖÿ™Ÿâ ÿ£ÿ®ÿ≠ÿ´ ŸÅŸä ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ Ÿàÿ£ÿ¨Ÿäÿ® ÿπŸÑŸâ ÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ±ÿßÿ™ŸÉ ÿ®ÿ∞ŸÉÿßÿ°.\n\nÿßÿ≥ÿ£ŸÑŸÜŸä ÿ£Ÿä ÿ¥Ÿäÿ° ÿπŸÜ ÿßŸÑŸÖÿ¨ŸàŸáÿ±ÿßÿ™!"
    })

if "rag_system" not in st.session_state:
    st.session_state.rag_system = None

# Initialize APIs and RAG
try:
    openai_client, pinecone_index = init_apis()

    if st.session_state.rag_system is None:
        with st.spinner("ÿ™ÿ≠ÿ∂Ÿäÿ± ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿ∞ŸÉŸä..."):
            st.session_state.rag_system = init_langchain_rag(
                pinecone_index,
                st.secrets["OPENAI_API_KEY"]
            )

        if st.session_state.rag_system:
            st.success("üöÄ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿ∞ŸÉŸä ÿ¨ÿßŸáÿ≤!")
        else:
            st.error("‚ùå ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ŸáŸäÿ¶ÿ© ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ®ÿ≠ÿ´")
            st.stop()

except Exception as e:
    st.error(f"ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿßÿ™ÿµÿßŸÑ: {e}")
    st.stop()

st.title("üíé ŸÖÿ≥ÿßÿπÿØ ŸÖÿ™ÿ¨ÿ± ÿßŸÑŸÖÿ¨ŸàŸáÿ±ÿßÿ™ ÿßŸÑÿ∞ŸÉŸä")
st.markdown("### ü§ñ ŸÖÿØÿπŸàŸÖ ÿ®ŸÄ Function Calling - ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸäŸÇÿ±ÿ± ŸÖÿ™Ÿâ Ÿäÿ®ÿ≠ÿ´")

# Tool definitions for the LLM
search_tool = {
    "type": "function",
    "function": {
        "name": "search_jewelry_products",
        "description": "ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ŸÖÿÆÿ≤ŸàŸÜ ÿßŸÑŸÖÿ¨ŸàŸáÿ±ÿßÿ™ ŸÅŸä ÿßŸÑŸÖÿ™ÿ¨ÿ±. ÿßÿ≥ÿ™ÿÆÿØŸÖ Ÿáÿ∞Ÿá ÿßŸÑÿ£ÿØÿßÿ© ÿπŸÜÿØŸÖÿß Ÿäÿ∑ŸÑÿ® ÿßŸÑÿπŸÖŸäŸÑ ŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÖÿ≠ÿØÿØÿ© ÿ£Ÿà Ÿäÿ≥ÿ£ŸÑ ÿπŸÜ ŸÖÿß ŸÖÿ™ŸàŸÅÿ± ŸÅŸä ÿßŸÑŸÖÿ™ÿ¨ÿ±.",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "ŸÜÿµ ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖÿ¨ŸàŸáÿ±ÿßÿ™ (ŸÖÿ´ŸÑ: ÿ≥ŸÑÿßÿ≥ŸÑ ÿ∞Ÿáÿ®Ÿäÿ©ÿå ÿÆŸàÿßÿ™ŸÖ ŸÅÿ∂Ÿäÿ©ÿå ÿ£ŸÇÿ±ÿßÿ∑ ŸÑŸÑÿ≤ŸÅÿßŸÅ)"
                }
            },
            "required": ["query"]
        }
    }
}

def search_jewelry_products(query: str, conversation_history: list = None) -> str:
    """Search for jewelry products and return formatted results"""
    try:
        if st.session_state.rag_system:
            _, results = st.session_state.rag_system.conversational_search(query, conversation_history)

            if results:
                # Format results for LLM context
                products_info = f"ÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ {len(results)} ŸÖŸÜÿ™ÿ¨ ŸÅŸä ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ:\n\n"
                for i, result in enumerate(results, 1):
                    metadata = result['metadata']
                    products_info += f"{i}. {metadata.get('name', 'ŸÖŸÜÿ™ÿ¨')}\n"
                    products_info += f"   ÿßŸÑÿ≥ÿπÿ±: {metadata.get('price', 0):.2f} ÿ±ŸäÿßŸÑ\n"
                    products_info += f"   ÿßŸÑŸÅÿ¶ÿ©: {metadata.get('category', 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ')}\n"
                    if metadata.get('karat'):
                        products_info += f"   ÿßŸÑÿπŸäÿßÿ±: {metadata.get('karat')}\n"
                    if metadata.get('weight', 0) > 0:
                        products_info += f"   ÿßŸÑŸàÿ≤ŸÜ: {metadata.get('weight')} ÿ¨ÿ±ÿßŸÖ\n"
                    if metadata.get('design'):
                        products_info += f"   ÿßŸÑÿ™ÿµŸÖŸäŸÖ: {metadata.get('design')}\n"
                    if metadata.get('product_url'):
                        products_info += f"   ÿßŸÑÿ±ÿßÿ®ÿ∑: {metadata.get('product_url')}\n"
                    products_info += f"   ÿßŸÑŸàÿµŸÅ: {metadata.get('description', '')[:150]}...\n\n"

                # Store results - but don't always show them as cards
                st.session_state.last_search_results = results

                # Add instruction for LLM
                products_info += "\nÿ™ÿπŸÑŸäŸÖÿßÿ™: ÿ™ÿ≠ÿØÿ´ ÿ®ÿ£ÿ≥ŸÑŸàÿ® ÿØÿßŸÅÿ¶ ŸàŸÖÿ±ÿ≠ÿ® ŸàŸàÿØŸàÿØ. ÿßÿ∞ŸÉÿ± Ÿáÿ∞Ÿá ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÅŸä ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ ŸÖÿπ ÿßŸÑÿ£ÿ≥ÿπÿßÿ± ŸàÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÖŸáŸÖÿ©. ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ•ÿØÿ±ÿßÿ¨ ÿßŸÑÿ±ÿßÿ®ÿ∑ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖÿ™ŸàŸÅÿ±ÿßŸã. ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿπÿ®ÿßÿ±ÿßÿ™ ÿ™ÿ±ÿ≠Ÿäÿ®Ÿäÿ© ŸàŸÉŸÜ ŸÖÿ™ÿ≠ŸÖÿ≥ÿßŸã ŸÑŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑÿπŸÖŸäŸÑ. ÿ™ÿ∞ŸÉÿ±: ÿ£ŸÜÿ™ ÿ™ÿ≠ÿßŸÅÿ∏ ÿπŸÑŸâ ÿ≥ŸäÿßŸÇ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© Ÿàÿ™ÿ±ÿ®ÿ∑ ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ ÿ®ŸÖÿß ÿ™ŸÖ ŸÖŸÜÿßŸÇÿ¥ÿ™Ÿá ÿ≥ÿßÿ®ŸÇÿßŸã."

                return products_info
            else:
                return "ÿ£ÿπÿ™ÿ∞ÿ±ÿå ŸÑŸÖ ÿ£ÿ¨ÿØ ŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿ™ÿ∑ÿßÿ®ŸÇ ÿ∑ŸÑÿ®ŸÉ ŸÅŸä ŸÖÿ¨ŸÖŸàÿπÿ™ŸÜÿß ÿßŸÑÿ≠ÿßŸÑŸäÿ©. ŸÑŸÉŸÜ ŸÑÿß ÿ™ŸÇŸÑŸÇ! ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿ¥Ÿäÿ° ÿ¢ÿÆÿ± ÿ£Ÿà ÿ™ŸÇÿØŸäŸÖ ÿßŸÇÿ™ÿ±ÿßÿ≠ÿßÿ™ ÿ®ÿØŸäŸÑÿ©. ŸÖÿß ÿ±ÿ£ŸäŸÉ ÿ£ŸÜ ŸÜÿ¨ÿ±ÿ® ÿ®ÿ≠ÿ´ÿßŸã ŸÖÿÆÿ™ŸÑŸÅÿßŸãÿü üòä"
        else:
            return "ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ®ÿ≠ÿ´ ÿ∫Ÿäÿ± ŸÖÿ™ÿßÿ≠ ÿ≠ÿßŸÑŸäÿßŸã."

    except Exception as e:
        return f"ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ®ÿ≠ÿ´: {e}"

def get_ai_response_with_tools(user_message: str, conversation_history: list) -> tuple:
    """Get AI response with access to search tools"""
    try:
        # Prepare messages for the AI
        messages = [
            {
                "role": "system",
                "content": """ÿ£ŸÜÿ™ ŸÖÿ≥ÿßÿπÿØ ŸÖÿ®Ÿäÿπÿßÿ™ ŸàÿØŸàÿØ ŸàŸÖÿ™ÿ≠ŸÖÿ≥ ŸÅŸä ŸÖÿ™ÿ¨ÿ± ŸÖÿ¨ŸàŸáÿ±ÿßÿ™! üíé

ÿ¥ÿÆÿµŸäÿ™ŸÉ:
- ŸÖÿ±ÿ≠ÿ® ŸàŸàÿØŸàÿØ ÿØÿßÿ¶ŸÖÿßŸã
- ŸÖÿ™ÿ≠ŸÖÿ≥ ŸÑŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°
- ÿÆÿ®Ÿäÿ± ŸÅŸä ÿßŸÑŸÖÿ¨ŸàŸáÿ±ÿßÿ™ ŸàŸÖÿ™ŸÅŸáŸÖ ŸÑÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ
- ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ŸÑÿ∫ÿ© ÿØÿßŸÅÿ¶ÿ© ŸàŸÖÿ¥ÿ¨ÿπÿ©

ŸÇŸàÿßÿπÿØ ŸÖŸáŸÖÿ©:
1. ŸÑÿØŸäŸÉ ÿ•ŸÖŸÉÿßŸÜŸäÿ© ÿßŸÑŸàÿµŸàŸÑ ŸÑÿ£ÿØÿßÿ© ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ŸÖÿÆÿ≤ŸàŸÜ ÿßŸÑŸÖÿ™ÿ¨ÿ±
2. ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ£ÿØÿßÿ© ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸÇÿ∑ ÿπŸÜÿØŸÖÿß Ÿäÿ∑ŸÑÿ® ÿßŸÑÿπŸÖŸäŸÑ ŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÖÿ≠ÿØÿØÿ© ÿ£Ÿà Ÿäÿ≥ÿ£ŸÑ ÿπŸÜ ÿßŸÑŸÖÿ™ŸàŸÅÿ±
3. ŸÑŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿπÿßŸÖÿ© ÿπŸÜ ÿßŸÑŸÖÿ¨ŸàŸáÿ±ÿßÿ™ ÿ£Ÿà ÿßŸÑŸÜÿµÿßÿ¶ÿ≠ÿå ÿ£ÿ¨ÿ® ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿ®ÿØŸàŸÜ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ£ÿØÿßÿ©
4. ÿπŸÜÿØŸÖÿß ÿ™ÿ≠ÿµŸÑ ÿπŸÑŸâ ŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑÿ®ÿ≠ÿ´ÿå ÿßÿ∞ŸÉÿ± ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÅŸä ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ ÿ®ÿ∑ÿ±ŸäŸÇÿ© ÿ∑ÿ®ŸäÿπŸäÿ© ŸàŸÖÿ™ÿ≠ŸÖÿ≥ÿ©
5. ÿßÿ∞ŸÉÿ± ÿßŸÑÿ£ÿ≥ŸÖÿßÿ° ŸàÿßŸÑÿ£ÿ≥ÿπÿßÿ± ŸàÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÖŸáŸÖÿ© ŸÅŸä ÿßŸÑŸÜÿµ
6. ÿßÿ®ÿØÿ£ ŸÖÿ≠ÿßÿØÿ´ÿßÿ™ŸÉ ÿ®ÿ™ÿ±ÿ≠Ÿäÿ® ÿØÿßŸÅÿ¶ ŸàÿßÿÆÿ™ÿ™ŸÖŸáÿß ÿ®ÿπÿ±ÿ∂ ŸÖÿ≥ÿßÿπÿØÿ© ÿ•ÿ∂ÿßŸÅŸäÿ©
7. ÿ™ÿ≠ÿØÿ´ ÿ®ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿØÿßÿ¶ŸÖÿßŸã Ÿàÿßÿ≥ÿ™ÿÆÿØŸÖ ÿπÿ®ÿßÿ±ÿßÿ™ ŸàÿØŸàÿØÿ©
8. üîó CRITICAL: ÿ™ÿ∞ŸÉÿ± ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ÿØÿßÿ¶ŸÖÿßŸã - ÿ±ÿßÿ¨ÿπ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© Ÿàÿßÿ±ÿ®ÿ∑ ÿ•ÿ¨ÿßÿ®ÿßÿ™ŸÉ ÿ®ŸÖÿß ŸÜÿßŸÇÿ¥ŸÜÿßŸá. ÿ•ÿ∞ÿß ÿ≥ÿ£ŸÑ ÿπŸÜ "ÿßŸÑÿ≥ÿπÿ±" ÿ£Ÿà "ÿßŸÑÿ£ŸÑŸàÿßŸÜ" ÿ®ÿØŸàŸÜ ÿ™ÿ≠ÿØŸäÿØÿå ÿßÿ±ÿ®ÿ∑Ÿá ÿ®ÿ¢ÿÆÿ± ŸÖŸÜÿ™ÿ¨ ÿ∞ŸÉÿ±ŸÜÿßŸá
9. ÿ•ÿ∞ÿß ŸÇÿßŸÑ ÿßŸÑÿπŸÖŸäŸÑ "ŸÖÿß ÿßŸÑÿ≥ÿπÿ±ÿü" ÿ®ÿπÿØ ÿ£ŸÜ ÿ™ÿ≠ÿØÿ´ÿ™ŸÖ ÿπŸÜ ŸÖŸÜÿ™ÿ¨ ŸÖÿπŸäŸÜÿå ÿ£ÿ¨ÿ® ÿπŸÜ ÿ≥ÿπÿ± ÿ∞ŸÑŸÉ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ™ÿ≠ÿØŸäÿØÿßŸã

ÿ•ÿ±ÿ¥ÿßÿØ ŸÑŸÑÿπÿ±ÿ∂:
- ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑÿπŸÖŸäŸÑ Ÿäÿ™ÿµŸÅÿ≠ ÿ£Ÿà ŸäŸÇÿßÿ±ŸÜÿå ÿ£ÿ∂ŸÅ: [SHOW_PRODUCTS] ŸÅŸä ŸÜŸáÿßŸäÿ© ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ
- ŸÑŸÑÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑÿ®ÿ≥Ÿäÿ∑ÿ©ÿå ŸÑÿß ÿ™ÿ∂ÿπ [SHOW_PRODUCTS]

ÿ£ŸÖÿ´ŸÑÿ©:
- "ÿπŸÜÿØŸÉŸÜ ÿ≥ŸÑÿßÿ≥ŸÑÿü" ‚Üí ÿßÿ∞ŸÉÿ± ÿßŸÑÿ≥ŸÑÿßÿ≥ŸÑ ÿßŸÑŸÖÿ™ŸàŸÅÿ±ÿ© ŸÅŸä ÿßŸÑŸÜÿµ
- "ÿ£ÿ±ŸäÿØ ÿ£ŸÇÿßÿ±ŸÜ ÿ®ŸäŸÜ ÿßŸÑÿÆŸàÿßÿ™ŸÖ" ‚Üí ÿßÿ∞ŸÉÿ± ÿßŸÑÿÆŸàÿßÿ™ŸÖ + [SHOW_PRODUCTS]
- "ŸÉŸÖ ÿ≥ÿπÿ± Ÿáÿ∞ÿß ÿßŸÑÿÆÿßÿ™ŸÖÿü" ‚Üí ÿßÿ∞ŸÉÿ± ÿßŸÑÿ≥ÿπÿ± ŸÅŸä ÿßŸÑŸÜÿµ ŸÅŸÇÿ∑
"""
            }
        ]

        # Add conversation history (last 6 messages)
        recent_history = conversation_history[-6:] if len(conversation_history) > 6 else conversation_history
        st.write(f"üîç DEBUG: Processing {len(recent_history)} history messages")
        for msg in recent_history:
            if msg["role"] in ["user", "assistant"]:
                content = msg["content"]
                if len(content) > 200:
                    content = content[:200] + "..."
                messages.append({"role": msg["role"], "content": content})
                st.write(f"üìù Added to context: {msg['role']}: {content[:50]}...")

        # Add current user message
        messages.append({"role": "user", "content": user_message})

        # Call OpenAI with function calling
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=messages,
            tools=[search_tool],
            tool_choice="auto",  # Let AI decide when to use tools
            temperature=0.3
        )

        response_message = response.choices[0].message
        search_results = None

        # Check if AI wants to use the search tool
        if response_message.tool_calls:
            for tool_call in response_message.tool_calls:
                if tool_call.function.name == "search_jewelry_products":
                    # Extract search query
                    function_args = json.loads(tool_call.function.arguments)
                    search_query = function_args.get("query", "")

                    # Perform search
                    search_result = search_jewelry_products(search_query, conversation_history)

                    # Add tool result to conversation
                    messages.append(response_message)
                    messages.append({
                        "role": "tool",
                        "tool_call_id": tool_call.id,
                        "content": search_result
                    })

                    # Get final response with search results
                    final_response = openai.chat.completions.create(
                        model="gpt-4",
                        messages=messages,
                        temperature=0.3
                    )

                    # Get final response content
                    final_content = final_response.choices[0].message.content

                    # Clean response content
                    clean_content = final_content.replace("[SHOW_PRODUCTS]", "").strip()

                    # Disable product cards completely for now
                    return clean_content, None

        # No tool calls - return direct response
        return response_message.content, None

    except Exception as e:
        return f"ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£: {e}", None

def display_products(products):
    """Display product results"""
    if not products:
        return

    cols = st.columns(min(len(products), 3))
    for idx, result in enumerate(products):
        with cols[idx % 3]:
            metadata = result['metadata']

            with st.container():
                st.markdown(f"**{metadata.get('name', 'ŸÖŸÜÿ™ÿ¨')}**")
                st.markdown(f"üí∞ **{metadata.get('price', 0):.2f} ÿ±ŸäÿßŸÑ**")
                st.markdown(f"üìÇ {metadata.get('category', 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ')}")

                # Additional details
                details = []
                if metadata.get('karat'):
                    details.append(f"ÿßŸÑÿπŸäÿßÿ±: {metadata.get('karat')}")
                if metadata.get('weight', 0) > 0:
                    details.append(f"ÿßŸÑŸàÿ≤ŸÜ: {metadata.get('weight')} ÿ¨ÿ±ÿßŸÖ")
                if metadata.get('design'):
                    details.append(f"ÿßŸÑÿ™ÿµŸÖŸäŸÖ: {metadata.get('design')}")

                if details:
                    st.markdown(f"üîπ {' | '.join(details)}")

                # Description
                description = metadata.get('description', '')
                if len(description) > 100:
                    description = description[:100] + "..."
                st.markdown(f"üìù {description}")

                # Score
                if 'score' in result:
                    st.markdown(f"üéØ ÿ™ÿ∑ÿßÿ®ŸÇ: {result['score'] * 100:.1f}%")

                # Add to cart
                if st.button(f"üõí ÿ£ÿ∂ŸÅ ŸÑŸÑÿ≥ŸÑÿ©", key=f"cart_{result['id']}_{idx}"):
                    st.success("ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÑŸÑÿ≥ŸÑÿ©! üõçÔ∏è")

                st.markdown("---")

# Chat interface
st.markdown("---")

# Display chat history (no product cards)
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

        # Product cards disabled completely
        # if message["role"] == "assistant" and "products" in message:
        #     if message["products"]:
        #         st.markdown("### üõçÔ∏è ŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÖŸÇÿ™ÿ±ÿ≠ÿ©:")
        #         display_products(message["products"])

# Image upload (keep existing functionality)
st.markdown("### üì∏ ÿ±ŸÅÿπ ÿµŸàÿ±ÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)")
uploaded_image = st.file_uploader(
    "ÿßÿ±ŸÅÿπ ÿµŸàÿ±ÿ© ŸÇÿ∑ÿπÿ© ŸÖÿ¨ŸàŸáÿ±ÿßÿ™:",
    type=['png', 'jpg', 'jpeg']
)

if uploaded_image:
    image = Image.open(uploaded_image)
    st.image(image, caption="ÿßŸÑÿµŸàÿ±ÿ© ÿßŸÑŸÖÿ±ŸÅŸàÿπÿ©", width=200)

    if st.button("üîç ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿµŸàÿ±ÿ©"):
        with st.spinner("ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿµŸàÿ±ÿ©..."):
            description = get_image_description(image)
            search_results = search_by_image(pinecone_index, image, top_k=5)

            formatted_results = []
            if search_results:
                for result in search_results:
                    formatted_results.append({
                        'id': result.id,
                        'score': result.score,
                        'metadata': result.metadata
                    })

            analysis_query = f"ÿ≠ŸÑŸÑ Ÿáÿ∞Ÿá ÿßŸÑÿµŸàÿ±ÿ©: {description}"
            bot_response, _ = get_ai_response_with_tools(analysis_query, st.session_state.messages)

            st.session_state.messages.append({
                "role": "user",
                "content": "üñºÔ∏è ÿ±ŸÅÿπÿ™ ÿµŸàÿ±ÿ© ŸÇÿ∑ÿπÿ© ŸÖÿ¨ŸàŸáÿ±ÿßÿ™"
            })
            st.session_state.messages.append({
                "role": "assistant",
                "content": bot_response
            })

            st.rerun()

# Chat input
if prompt := st.chat_input("ÿßŸÉÿ™ÿ® ÿ±ÿ≥ÿßŸÑÿ™ŸÉ ŸáŸÜÿß..."):
    # Add user message
    st.session_state.messages.append({"role": "user", "content": prompt})

    # Display user message
    with st.chat_message("user"):
        st.markdown(prompt)

    # Generate AI response with tools
    with st.chat_message("assistant"):
        with st.spinner("ÿ£ŸÅŸÉÿ±..."):
            response, search_results = get_ai_response_with_tools(prompt, st.session_state.messages)

            st.markdown(response)

            # Product cards disabled - all info in conversational text
            # if search_results:
            #     st.markdown("### üõçÔ∏è ŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÖŸÇÿ™ÿ±ÿ≠ÿ©:")
            #     display_products(search_results)

    # Add assistant response to history (no product cards)
    assistant_message = {
        "role": "assistant",
        "content": response
    }

    st.session_state.messages.append(assistant_message)

# Sidebar
st.sidebar.title("ü§ñ Function Calling")
st.sidebar.markdown("""
**ŸÉŸäŸÅ ŸäÿπŸÖŸÑ:**

üß† **AI ŸäŸÇÿ±ÿ± ŸÉŸÑ ÿ¥Ÿäÿ°:**
- ŸÖÿ™Ÿâ Ÿäÿ®ÿ≠ÿ´ ŸÅŸä ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ
- ŸÉŸäŸÅ Ÿäÿπÿ±ÿ∂ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨
- ŸÖÿ™Ÿâ Ÿäÿ∏Ÿáÿ± ŸÉÿ±Ÿàÿ™ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™

üí¨ **ÿπÿ±ÿ∂ ŸÖÿ≠ÿßÿØÿ´ÿ© ŸÅŸÇÿ∑:**
- ŸäÿØŸÖÿ¨ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÅŸä ÿßŸÑŸÜÿµ ÿ∑ÿ®ŸäÿπŸäÿßŸã
- ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÉÿ±Ÿàÿ™ ŸÖŸÜÿ™ÿ¨ÿßÿ™
- ŸÉŸÑ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÅŸä ÿßŸÑÿ≠ÿØŸäÿ´

**ÿ£ŸÖÿ´ŸÑÿ©:**

üîç **"ÿπŸÜÿØŸÉŸÜ ÿ≥ŸÑÿßÿ≥ŸÑÿü"**
‚Üí ÿ≥Ÿäÿ®ÿ≠ÿ´ ŸàŸäÿ∞ŸÉÿ± ÿßŸÑÿ≥ŸÑÿßÿ≥ŸÑ ŸÅŸä ÿßŸÑŸÜÿµ

üõí **"ÿ£ÿ±ŸäÿØ ÿ£ŸÇÿßÿ±ŸÜ ÿßŸÑÿÆŸàÿßÿ™ŸÖ"**
‚Üí ÿ≥Ÿäÿ®ÿ≠ÿ´ ŸàŸäÿ∞ŸÉÿ± ÿßŸÑÿÆŸàÿßÿ™ŸÖ ŸÖÿπ ÿßŸÑŸÖŸÇÿßÿ±ŸÜÿ©

üí∞ **"ŸÉŸÖ ÿ≥ÿπÿ± ÿßŸÑÿ≥ŸÑÿ≥ŸÑÿ© ÿßŸÑÿ∞Ÿáÿ®Ÿäÿ©ÿü"**
‚Üí ÿ≥Ÿäÿ∞ŸÉÿ± ÿßŸÑÿ≥ÿπÿ± ŸÅŸä ÿßŸÑŸÜÿµ ŸÅŸÇÿ∑

üí¨ **"ŸÖÿ±ÿ≠ÿ®ÿßŸã"**
‚Üí ÿ±ÿØ ŸÖÿ®ÿßÿ¥ÿ± ÿ®ÿØŸàŸÜ ÿ®ÿ≠ÿ´
""")

st.sidebar.markdown("---")
if st.sidebar.button("üßπ ŸÖÿ≥ÿ≠ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©"):
    # Clear everything including any cached product data
    st.session_state.clear()
    st.session_state.messages = []
    st.session_state.messages.append({
        "role": "assistant",
        "content": "ÿ™ŸÖ ŸÖÿ≥ÿ≠ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©! üßπ\n\nŸÖÿ±ÿ≠ÿ®ÿßŸã ŸÖÿ¨ÿØÿØÿßŸã! ÿßÿ≥ÿ£ŸÑŸÜŸä ÿ£Ÿä ÿ¥Ÿäÿ° ÿπŸÜ ÿßŸÑŸÖÿ¨ŸàŸáÿ±ÿßÿ™."
    })
    st.rerun()

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: gray;'>
    üíé ŸÖÿ≥ÿßÿπÿØ ŸÖÿ™ÿ¨ÿ± ÿßŸÑŸÖÿ¨ŸàŸáÿ±ÿßÿ™ ÿßŸÑÿ∞ŸÉŸä<br>
    ü§ñ ŸÖÿØÿπŸàŸÖ ÿ®ŸÄ Function Calling - ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸäŸÇÿ±ÿ±
    </div>
    """,
    unsafe_allow_html=True
)